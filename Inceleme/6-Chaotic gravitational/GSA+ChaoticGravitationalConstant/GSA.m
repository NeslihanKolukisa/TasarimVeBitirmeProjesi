% GSA code v1.0.
% Generated by Esmat Rashedi, 2009. 
% Adopted from: "	E. Rashedi, H. Nezamabadi-pour and S. Saryazdi,
% “GSA: A Gravitational Search Algorithm”, Information sciences, vol. 179,
% no. 13, pp. 2232-2248, 2009."

% Gravitational Search Algorithm.
function BestChart=GSA(F_index,N,max_it,ElitistCheck,chaosIndex,chValueInitial)

%V:   Velocity.
%a:   Acceleration.
%M:   Mass.  Ma=Mp=Mi=M;
%dim: Dimension of test function.
%N:   Number of agents.
%X:   Position of agents. dim-by-N matrix.
%R:   Distance between agents in search space.
%[low-up]: Allowable range for search space.
%Rnorm:  Norm in eq.8.
%Rpower: Power of R in eq.7.
 G_History=zeros(1,max_it);
 Rnorm=2; 
 Rpower=1; 
 min_flag=1; % 1: minimization, 0: maximization
 
%get allowable range and dimension of the test function.
[low,up,dim]=test_functions_range(F_index); 

%random initialization for agents.
X=initialization(dim,N,up,low); 

%create chart of best so far and average fitnesses.
BestChart=[];MeanChart=[];

V=zeros(dim,N);
wMax=chValueInitial;
wMin=1e-10;
for iteration=1:max_it
    chValue=wMax-iteration*((wMax-wMin)/max_it);

%     iteration
    
    %Checking allowable range. 
    X=space_bound(X,up,low); 

    %Evaluation of agents. 
    fitness=evaluateF(X,F_index); 
    
    [best best_X]=min(fitness); %min: minimization.  max: maximization.
    
    if iteration==1
       Fbest=best;Lbest=X(:,best_X);
    end
    if best<Fbest  % < : minimization. > : maximization
       Fbest=best;Lbest=X(:,best_X);
    end
      
BestChart=[BestChart Fbest];
MeanChart=[MeanChart mean(fitness)];

%Calculation of M. eq.14-20
[M]=massCalculation(fitness,min_flag); 

%Calculation of Gravitational constant. eq.13.
G=Gconstant(iteration,max_it);
%G=chaos(3,iteration,max_it,10);
switch chaosIndex
    case 1
        G=Gconstant(iteration,max_it); 
    case 2
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
    case 3
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
    case 4
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
    case 5
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
    case 6
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
    case 7
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
    case 8
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
    case 9
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
    case 10
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
    case 11
        G=G+chaos(chaosIndex-1,iteration,max_it,chValue);
end
G_History(iteration)=G;
test_G(iteration)=G;
if iteration==499
    alisop=0;
end
%Calculation of accelaration in gravitational field. eq.7-10,21.
a=Gfield(M,X,G,Rnorm,Rpower,ElitistCheck,iteration,max_it);

%Agent movement. eq.11-12
[X,V]=move(X,a,V);


end %iteration

